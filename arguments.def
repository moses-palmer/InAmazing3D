#ifndef ARGUMENT_HELPERS
#define ARGUMENT_HELPERS

#define ARGUMENTS_NO_SETUP
#define ARGUMENTS_NO_TEARDOWN

#define ARGUMENTS_HELP \
    "This application allows exploring a randomly generated maze as an " \
    "autostereogram interactively."

/* The strength values for the different effects */
#define LUMINANCE_STRENGTH1_BASE 2.0
#define LUMINANCE_STRENGTH1_EXTRA 4.0
#define LUMINANCE_STRENGTH2_BASE 2.0
#define LUMINANCE_STRENGTH2_EXTRA 4.0

/**
 * The width of the pattern used to render a stereogram when none is specified
 * on the command line.
 */
#define PATTERN_WIDTH 32

/**
 * The height of the pattern used to render a stereogram when none is specified
 * on the command line.
 */
#define PATTERN_HEIGHT PATTERN_WIDTH

#endif

ARGUMENT_SECTION("General options")

ARGUMENT(struct { int width; int height; }, window_size, "-w",
    "<width> <height>\n"
    "Sets the size of the window.\n"
    "\n"
    "If this is not specified, the application will run in full screen mode.\n",
    2, ARGUMENT_IS_OPTIONAL,

    target->width = 0;
    target->height = 0;
    ,

    target->width = atoi(value_strings[0]);
    target->height = atoi(value_strings[1]);
    is_valid = target->width > 1 && target->height > 1;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for window-size (%s %s): dimensions "
            "must be integers larger than 1\n",
            value_strings[0], value_strings[1]);
    }
    ,
)

ARGUMENT_SECTION("Maze options")

ARGUMENT(struct { int width; int height; }, maze_size, "-m",
    "<width> <height>\n"
    "Sets the size of the maze. The width and height must be greater than 1.\n"
    "\n"
    "Default: 30 20",
    2, ARGUMENT_IS_OPTIONAL,

    target->width = 30;
    target->height = 20;
    ,

    target->width = atoi(value_strings[0]);
    target->height = atoi(value_strings[1]);
    is_valid = target->width > 1 && target->height > 1;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for maze-size (%s %s): dimensions must "
            "be integers larger than 1\n",
            value_strings[0], value_strings[1]);
    }
    ,
)

ARGUMENT(double, wall_width, "-w",
    "<value>\n"
    "Sets the width of walls in the maze.\n"
    "\n"
    "A value of 0.5 would cause the walls on the different sides of a room to "
    "run into each other and leave no room for the target.\n"
    "\n"
    "Default: 0.05",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 0.05;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.0
        && *target < 0.5;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for wall-width (%s): the width must be "
            "a number between 0.0 and 0.5\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(double, slope_width, ARGUMENT_NO_SHORT_OPTION,
    "<value>\n"
    "Sets the width of the slope of walls in the maze.\n"
    "\n"
    "The slope width and the wall width together must not exceed 0.5.\n"
    "\n"
    "Default: 0.25",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 0.25;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.0
        && *target + ARGUMENT_VALUE(wall_width) < 0.5;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for slope-width (%s): the width must be "
            "a number between 0.0 and %g\n",
            value_strings[0], 0.5 - ARGUMENT_VALUE(wall_width));
    }
    ,
)

ARGUMENT(double, shortcut_ratio, "-s",
    "<value>\n"
    "Sets the shortcut ratio for the maze.\n"
    "\n"
    "When the maze has been generated, a number of walls are opened. The walls "
    "are selected randomly, and if they are not on the edge of the maze, they "
    "are opened. The number of attempts is 4 * <maze-width> * <maze-height> "
    "* <value>.\n"
    "\n"
    "Default: 0.0",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 0.0;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0 && *target >= 0.0 && *target <= 1.0;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for shortcut-ratio (%s): the ratio must "
            "be a number between 0.0 and 1.0\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT_SECTION("Stereogram options")

ARGUMENT(double, stereogram_strength, ARGUMENT_NO_SHORT_OPTION,
    "<value>\n"
    "Sets the strength of the stereogram effect.\n"
    "\n"
    "Negative values will invert the depth.\n"
    "\n"
    "Default: 10.0",
    1, ARGUMENT_IS_OPTIONAL,

    *target = 10.0;
    ,

    char *end;
    *target = strtod(value_strings[0], &end);
    is_valid = *end == 0;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for stereogram-strength (%s): the value "
            "must be a number\n",
            value_strings[0]);
    }
    ,
)

ARGUMENT(StereoPattern*, pattern_image, "-p",
    "<PNG image>\n"
    "Sets the background pattern used for the stereogram effect.\n"
    "\n"
    "This must be a PNG image.\n"
    "\n"
    "If this is not specified, a random pattern will be generated.",
    1, ARGUMENT_IS_OPTIONAL,

    double luminance_strengths1[5];
    double luminance_strengths2[5];
    int i;

    /* Randomise the effect parameters */
    for (i = 0; i < sizeof(luminance_strengths1) / sizeof(double); i++) {
        luminance_strengths1[i] = LUMINANCE_STRENGTH1_BASE
                + LUMINANCE_STRENGTH1_EXTRA
            * (double)(rand() - RAND_MAX / 2) / RAND_MAX / (i + 1);
    }
    for (i = 0; i < sizeof(luminance_strengths2) / sizeof(double); i++) {
        luminance_strengths2[i] = LUMINANCE_STRENGTH2_BASE
                + LUMINANCE_STRENGTH2_EXTRA
            * (double)(rand() - RAND_MAX / 2) / RAND_MAX / (i + 1);
    }

    /* Create the base image for the pattern */
    *target = stereo_pattern_create(PATTERN_WIDTH, PATTERN_HEIGHT);
    stereo_pattern_effect_run(*target, luminance,
        sizeof(luminance_strengths1) / sizeof(double), luminance_strengths1,
        PP_RED | PP_BLUE);
    stereo_pattern_effect_run(*target, luminance,
        sizeof(luminance_strengths1) / sizeof(double), luminance_strengths1,
        PP_RED);
    stereo_pattern_effect_run(*target, luminance,
        sizeof(luminance_strengths2) / sizeof(double), luminance_strengths2,
        PP_GREEN);
    ,

    *target = stereo_pattern_create_from_png_file(value_strings[0]);
    is_valid = *target != NULL;

    if (!is_valid) {
        fprintf(stderr, "Invalid value for pattern-image (%s): the value must "
            "be a PNG image\n",
            value_strings[0]);
    }
    ,

    stereo_pattern_free(*target);
)
